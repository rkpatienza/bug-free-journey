// Jack OS String class

class String {
    field Array s;
    field int max;
    field int curLength;

    constructor String new(int maxLength){
        // constructs a new empty string (of length zero) that can contain at most
        // maxLength characters
        if(maxLength = 0){
            let s = Array.new(1);
        }
        else{
            let s = Array.new(maxLength);
        }
        let max = maxLength;
        let curLength = 0;
        return this;
    }

    method void dispose(){
        // disposes this string
        do s.dispose();
        let max = 0;
        let curLength = 0;
        return;
    }

    method int length(){
        // returns the length of this string
        return curLength;
    }

    method char charAt(int j){
        // returns the character at the location j of this string
        if(j < max){
            return s[j];
        }
        else{
            return 0;
        }
    }

    method void setCharAt(int j, char c){
        // sets the j-th element of this string to c
        if(j < max){
            let s[j] = c;
        }
        return;
    }

    method String appendChar(char c){
        // appends c to this string and returns this string
        if(curLength < max){
            let s[curLength] = c;
            let curLength = curLength + 1;
        }
        return this;
    }

    method void eraseLastChar(){
        // erases the last char from this string
        if(curLength > 0){
            let curLength = curLength - 1;
        }
        return;
    }

    method int intValue(){
        // returns the integer value of this string (or the string prefix until a non-digit
        // character is detected)
        var int v, d, i;
        var boolean neg;
        let v = 0;
        let i = 0;
        if(s[i] = 45){
            let i = i + 1;
            let neg = true;            
        }
        while((i < curLength) & ((s[i] > 47) | (s[i] < 58))){
            let d = s[i] - 48;
            let v = (v*10) + d;
            let i = i + 1;
        }
        if(neg){
            return -v;
        }
        else{
            return v;
        }
    }

    method void setInt(int j){
        // sets this string to hold a representation of j
        var int quotient, remainder;
        var int c;  // bypass compiler bug?
        let curLength = 0;  // reset string?
        let quotient = Math.divide(j, 10);
        let remainder = Math.abs(j) - Math.abs(quotient*10);
        let c = remainder + 48;
        if(Math.abs(j) < 10){
            // return c as a string?
            if (j < 0){
                do appendChar(45);
            }
            do appendChar(c);
        }
        else{
            do setInt(quotient);
            do appendChar(c);
        }
        return;
    }

    function char backSpace(){
        // returns the backspace character
        return 129;
    }

    function char doubleQuote(){
        // returns the double quote (") character;
        return 34;
    }

    function char newLine(){
        // returns the newline character
        return 128;
    }
}