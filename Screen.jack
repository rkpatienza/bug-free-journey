// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int screenAddr;
    static int color;
    static Array twoToThe;
    /** Initializes the Screen. */
    function void init() {
        let screenAddr = 16384;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767 + 1;
        let color = 1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int count;
        var Array myScreen;
        let myScreen = 0;
        let count = 0;
        // clear up to 24575
        while (count < 8191) {
            do Memory.poke(myScreen[count + screenAddr], 0);
            let count = count + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if(b) {
            let color = 1;
        }
        else {
            let color = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, remainder;
        var Array myScreen;
        let myScreen = 0;
        let address = Math.divide(x, 16);   // figure out which row
        let remainder = x - (address*16);
        let address = address + (32 * y);  // getting the column
        if (color = 1) {
            let myScreen[screenAddr + address] = myScreen[screenAddr + address] | twoToThe[remainder];
        }
        else {
            let myScreen[screenAddr + address] = myScreen[screenAddr + address] & ~twoToThe[remainder];
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b;
        let dx = Math.abs(x1 - x2);
        let dy = Math.abs(y1 - y2);
        let a = 0;
        let b = 0;
        // handle horizontal/vertical
        if (dy = 0) {
            while((a < dx) | (a = dx)){
                if(x1 < x2) {
                    do Screen.drawPixel(x1+a, y1);
                }
                else {
                    do Screen.drawPixel(x1-a, y1);
                }
                let a = a + 1;
            }
        }
        if (dx = 0) {
            while((b < dy) | (b = dy)){
                if(y1 < y2) {
                    do Screen.drawPixel(x1, y1+b);
                }
                else {
                    do Screen.drawPixel(x1, y1-b);
                }
                let b = b + 1;
            }
        }
        // diagonal line
        while ( ((a < dx) | (a = dx)) & ((b < dy) | (b = dy)) ) {
            if((x1 < x2) & (y1 < y2)) {
                do Screen.drawPixel(x1+a, y1+b);
            }
            if((x1 < x2) & (y1 > y2)) {
                do Screen.drawPixel(x1+a, y1-b);
            }
            if((x1 > x2) & (y1 > y2)) {
                do Screen.drawPixel(x1-a, y1-b);
            }
            if((x1 > x2) & (y1 < y2)) {
                do Screen.drawPixel(x1-a, y1+b);
            }
            if((a*dy) < (b*dx)) {
                let a = a + 1;
            }
            else {
                let b = b + 1;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int b, dy;
        let b = 0;
        let dy = y2 - y1;
        // drawing continuous horizontal lines
        while((b < dy) | (b = dy)) {
            do Screen.drawLine(x1, y1+b, x2, y1+b);
            let b = b + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        // limit radius to be at most 181
        var int radius, dy, rr, dx, dydy;
        if(r > 181) {
            let radius = 181;
        }
        else {
            let radius = r;
        }
        let dy = -r;
        let rr = r*r;
        while ((dy < r) | (dy = r)) {
            let dydy = dy*dy;
            let dx = Math.sqrt(rr - dydy);
            do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
